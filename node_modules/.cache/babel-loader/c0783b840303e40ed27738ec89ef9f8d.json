{"ast":null,"code":"import { handleErrorResponse } from \"../../common/Script\";\nimport { getOrderService, placeOrderService } from \"./Service\";\nimport { getOrder, getPlaceOrder } from \"./Slice\";\nexport const placeOrderAction = item => {\n  return async (dispatch, getState) => {\n    localStorage.removeItem(\"cartItems\");\n\n    try {\n      const response = await placeOrderService(item);\n\n      if (response) {\n        dispatch(getPlaceOrder(true));\n      }\n    } catch (error) {\n      dispatch(getPlaceOrder(false));\n    }\n  };\n};\nexport const getOrderAction = item => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await getOrderService(item);\n      dispatch(getOrder(response));\n    } catch (error) {\n      console.log(\"Something Went Order\");\n      handleErrorResponse(error);\n    }\n  };\n};","map":{"version":3,"names":["handleErrorResponse","getOrderService","placeOrderService","getOrder","getPlaceOrder","placeOrderAction","item","dispatch","getState","localStorage","removeItem","response","error","getOrderAction","console","log"],"sources":["C:/Users/arunm/MeMeglobalsites/Elysium/New folder/ElysiumChange/src/components/stateContainers/Order/ThunkAction.ts"],"sourcesContent":["import { handleErrorResponse } from \"../../common/Script\";\r\nimport { getOrderService, placeOrderService } from \"./Service\";\r\nimport { getOrder, getPlaceOrder } from \"./Slice\";\r\nimport { IOrder, IPlaceOrder } from \"./Types\";\r\n\r\nexport const placeOrderAction = (item: IPlaceOrder) => {\r\n  return async (dispatch: any, getState: any) => {\r\n    localStorage.removeItem(\"cartItems\");\r\n    try {\r\n      const response: any = await placeOrderService(item);\r\n      if (response) {\r\n        dispatch(getPlaceOrder(true));\r\n      }\r\n    } catch (error) {\r\n      dispatch(getPlaceOrder(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const getOrderAction = (item: any) => {\r\n  return async (dispatch: any, getState: any) => {\r\n    try {\r\n      const response: IOrder[] = await getOrderService(item);\r\n      dispatch(getOrder(response));\r\n    } catch (error) {\r\n      console.log(\"Something Went Order\");\r\n      handleErrorResponse(error);\r\n    }\r\n  };\r\n};\r\n"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,qBAApC;AACA,SAASC,eAAT,EAA0BC,iBAA1B,QAAmD,WAAnD;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,SAAxC;AAGA,OAAO,MAAMC,gBAAgB,GAAIC,IAAD,IAAuB;EACrD,OAAO,OAAOC,QAAP,EAAsBC,QAAtB,KAAwC;IAC7CC,YAAY,CAACC,UAAb,CAAwB,WAAxB;;IACA,IAAI;MACF,MAAMC,QAAa,GAAG,MAAMT,iBAAiB,CAACI,IAAD,CAA7C;;MACA,IAAIK,QAAJ,EAAc;QACZJ,QAAQ,CAACH,aAAa,CAAC,IAAD,CAAd,CAAR;MACD;IACF,CALD,CAKE,OAAOQ,KAAP,EAAc;MACdL,QAAQ,CAACH,aAAa,CAAC,KAAD,CAAd,CAAR;IACD;EACF,CAVD;AAWD,CAZM;AAcP,OAAO,MAAMS,cAAc,GAAIP,IAAD,IAAe;EAC3C,OAAO,OAAOC,QAAP,EAAsBC,QAAtB,KAAwC;IAC7C,IAAI;MACF,MAAMG,QAAkB,GAAG,MAAMV,eAAe,CAACK,IAAD,CAAhD;MACAC,QAAQ,CAACJ,QAAQ,CAACQ,QAAD,CAAT,CAAR;IACD,CAHD,CAGE,OAAOC,KAAP,EAAc;MACdE,OAAO,CAACC,GAAR,CAAY,sBAAZ;MACAf,mBAAmB,CAACY,KAAD,CAAnB;IACD;EACF,CARD;AASD,CAVM"},"metadata":{},"sourceType":"module"}