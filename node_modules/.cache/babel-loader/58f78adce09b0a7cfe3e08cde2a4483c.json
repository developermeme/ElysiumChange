{"ast":null,"code":"const getExistingItem = (addressItems, mcid) => {\n  let addresses = [];\n  const parcedAddressItems = JSON.parse(addressItems);\n  addresses = parcedAddressItems;\n  const existingAddressIndex = addresses.findIndex(item => item.id === mcid);\n  const existingAddressItem = addresses[existingAddressIndex];\n  const details = {\n    addresses,\n    existingAddressIndex,\n    existingAddressItem\n  };\n  return details;\n};\n\nexport const updateAddressList = selectedAddress => {\n  let addressItems = localStorage.getItem(\"user-address\");\n  let addresses = [];\n  let updatedAddress;\n  const addAddress = { ...selectedAddress,\n    id: Math.random()\n  }; // Already pdts available in local storage\n\n  if (addressItems) {\n    const existingItemDetails = getExistingItem(addressItems, selectedAddress.id);\n    const {\n      addresses: addressesList,\n      existingAddressIndex,\n      existingAddressItem\n    } = existingItemDetails;\n    addresses = addressesList;\n\n    if (existingAddressItem) {\n      const updatedItem = { ...selectedAddress\n      };\n      updatedAddress = [...addresses];\n      updatedAddress[existingAddressIndex] = updatedItem;\n    } // Adding new pdt\n    else {\n      updatedAddress = addresses.concat(addAddress);\n    }\n  } // adding new pts\n  else {\n    updatedAddress = addresses.concat(addAddress);\n  }\n\n  localStorage.setItem(\"user-address\", JSON.stringify(updatedAddress));\n};\nexport const DeleteAddressItem = mcId => {\n  let addressItems = localStorage.getItem(\"user-address\");\n  let addresses = [];\n  let updatedAddress;\n\n  if (addressItems) {\n    const existingItemDetails = getExistingItem(addressItems, mcId);\n    const {\n      addresses: addressesList,\n      existingAddressIndex,\n      existingAddressItem\n    } = existingItemDetails;\n    addresses = addressesList;\n\n    if (existingAddressItem) {\n      addresses.splice(existingAddressIndex, 1);\n      updatedAddress = [...addresses];\n    } else {\n      updatedAddress = [...addresses];\n    }\n  } else {\n    updatedAddress = [...addresses];\n  }\n\n  localStorage.setItem(\"user-address\", JSON.stringify(updatedAddress));\n};\n_c = DeleteAddressItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeleteAddressItem\");","map":{"version":3,"names":["getExistingItem","addressItems","mcid","addresses","parcedAddressItems","JSON","parse","existingAddressIndex","findIndex","item","id","existingAddressItem","details","updateAddressList","selectedAddress","localStorage","getItem","updatedAddress","addAddress","Math","random","existingItemDetails","addressesList","updatedItem","concat","setItem","stringify","DeleteAddressItem","mcId","splice"],"sources":["C:/Users/arunm/MeMeglobalsites/Elysium/New folder/ElysiumChange/src/components/common/AddressScripts.ts"],"sourcesContent":["import { IAddress } from \"../../model/IProductType\";\r\n\r\nconst getExistingItem = (addressItems: IAddress[] | any, mcid: number) => {\r\n  let addresses: IAddress[] = [];\r\n  const parcedAddressItems = JSON.parse(addressItems);\r\n  addresses = parcedAddressItems;\r\n\r\n  const existingAddressIndex = addresses.findIndex(\r\n    (item: IAddress) => item.id === mcid\r\n  );\r\n\r\n  const existingAddressItem = addresses[existingAddressIndex];\r\n\r\n  const details = {\r\n    addresses,\r\n    existingAddressIndex,\r\n    existingAddressItem,\r\n  };\r\n\r\n  return details;\r\n};\r\n\r\nexport const updateAddressList = (selectedAddress: IAddress) => {\r\n  let addressItems = localStorage.getItem(\"user-address\") as any;\r\n  let addresses: IAddress[] = [];\r\n  let updatedAddress;\r\n\r\n  const addAddress = {\r\n    ...selectedAddress,\r\n    id: Math.random(),\r\n  };\r\n  // Already pdts available in local storage\r\n  if (addressItems) {\r\n    const existingItemDetails = getExistingItem(\r\n      addressItems,\r\n      selectedAddress.id\r\n    );\r\n\r\n    const {\r\n      addresses: addressesList,\r\n      existingAddressIndex,\r\n      existingAddressItem,\r\n    } = existingItemDetails;\r\n\r\n    addresses = addressesList;\r\n\r\n    if (existingAddressItem) {\r\n      const updatedItem = {\r\n        ...selectedAddress,\r\n      };\r\n      updatedAddress = [...addresses];\r\n      updatedAddress[existingAddressIndex] = updatedItem;\r\n    }\r\n    // Adding new pdt\r\n    else {\r\n      updatedAddress = addresses.concat(addAddress);\r\n    }\r\n  }\r\n  // adding new pts\r\n  else {\r\n    updatedAddress = addresses.concat(addAddress);\r\n  }\r\n\r\n  localStorage.setItem(\"user-address\", JSON.stringify(updatedAddress));\r\n};\r\n\r\nexport const DeleteAddressItem = (mcId: number) => {\r\n  let addressItems = localStorage.getItem(\"user-address\") as any;\r\n  let addresses: IAddress[] = [];\r\n  let updatedAddress;\r\n\r\n  if (addressItems) {\r\n    const existingItemDetails = getExistingItem(addressItems, mcId);\r\n\r\n    const {\r\n      addresses: addressesList,\r\n      existingAddressIndex,\r\n      existingAddressItem,\r\n    } = existingItemDetails;\r\n\r\n    addresses = addressesList;\r\n\r\n    if (existingAddressItem) {\r\n      addresses.splice(existingAddressIndex, 1);\r\n      updatedAddress = [...addresses];\r\n    } else {\r\n      updatedAddress = [...addresses];\r\n    }\r\n  } else {\r\n    updatedAddress = [...addresses];\r\n  }\r\n\r\n  localStorage.setItem(\"user-address\", JSON.stringify(updatedAddress));\r\n};\r\n"],"mappings":"AAEA,MAAMA,eAAe,GAAG,CAACC,YAAD,EAAiCC,IAAjC,KAAkD;EACxE,IAAIC,SAAqB,GAAG,EAA5B;EACA,MAAMC,kBAAkB,GAAGC,IAAI,CAACC,KAAL,CAAWL,YAAX,CAA3B;EACAE,SAAS,GAAGC,kBAAZ;EAEA,MAAMG,oBAAoB,GAAGJ,SAAS,CAACK,SAAV,CAC1BC,IAAD,IAAoBA,IAAI,CAACC,EAAL,KAAYR,IADL,CAA7B;EAIA,MAAMS,mBAAmB,GAAGR,SAAS,CAACI,oBAAD,CAArC;EAEA,MAAMK,OAAO,GAAG;IACdT,SADc;IAEdI,oBAFc;IAGdI;EAHc,CAAhB;EAMA,OAAOC,OAAP;AACD,CAlBD;;AAoBA,OAAO,MAAMC,iBAAiB,GAAIC,eAAD,IAA+B;EAC9D,IAAIb,YAAY,GAAGc,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAnB;EACA,IAAIb,SAAqB,GAAG,EAA5B;EACA,IAAIc,cAAJ;EAEA,MAAMC,UAAU,GAAG,EACjB,GAAGJ,eADc;IAEjBJ,EAAE,EAAES,IAAI,CAACC,MAAL;EAFa,CAAnB,CAL8D,CAS9D;;EACA,IAAInB,YAAJ,EAAkB;IAChB,MAAMoB,mBAAmB,GAAGrB,eAAe,CACzCC,YADyC,EAEzCa,eAAe,CAACJ,EAFyB,CAA3C;IAKA,MAAM;MACJP,SAAS,EAAEmB,aADP;MAEJf,oBAFI;MAGJI;IAHI,IAIFU,mBAJJ;IAMAlB,SAAS,GAAGmB,aAAZ;;IAEA,IAAIX,mBAAJ,EAAyB;MACvB,MAAMY,WAAW,GAAG,EAClB,GAAGT;MADe,CAApB;MAGAG,cAAc,GAAG,CAAC,GAAGd,SAAJ,CAAjB;MACAc,cAAc,CAACV,oBAAD,CAAd,GAAuCgB,WAAvC;IACD,CAND,CAOA;IAPA,KAQK;MACHN,cAAc,GAAGd,SAAS,CAACqB,MAAV,CAAiBN,UAAjB,CAAjB;IACD;EACF,CAzBD,CA0BA;EA1BA,KA2BK;IACHD,cAAc,GAAGd,SAAS,CAACqB,MAAV,CAAiBN,UAAjB,CAAjB;EACD;;EAEDH,YAAY,CAACU,OAAb,CAAqB,cAArB,EAAqCpB,IAAI,CAACqB,SAAL,CAAeT,cAAf,CAArC;AACD,CA1CM;AA4CP,OAAO,MAAMU,iBAAiB,GAAIC,IAAD,IAAkB;EACjD,IAAI3B,YAAY,GAAGc,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAnB;EACA,IAAIb,SAAqB,GAAG,EAA5B;EACA,IAAIc,cAAJ;;EAEA,IAAIhB,YAAJ,EAAkB;IAChB,MAAMoB,mBAAmB,GAAGrB,eAAe,CAACC,YAAD,EAAe2B,IAAf,CAA3C;IAEA,MAAM;MACJzB,SAAS,EAAEmB,aADP;MAEJf,oBAFI;MAGJI;IAHI,IAIFU,mBAJJ;IAMAlB,SAAS,GAAGmB,aAAZ;;IAEA,IAAIX,mBAAJ,EAAyB;MACvBR,SAAS,CAAC0B,MAAV,CAAiBtB,oBAAjB,EAAuC,CAAvC;MACAU,cAAc,GAAG,CAAC,GAAGd,SAAJ,CAAjB;IACD,CAHD,MAGO;MACLc,cAAc,GAAG,CAAC,GAAGd,SAAJ,CAAjB;IACD;EACF,CAjBD,MAiBO;IACLc,cAAc,GAAG,CAAC,GAAGd,SAAJ,CAAjB;EACD;;EAEDY,YAAY,CAACU,OAAb,CAAqB,cAArB,EAAqCpB,IAAI,CAACqB,SAAL,CAAeT,cAAf,CAArC;AACD,CA3BM;KAAMU,iB"},"metadata":{},"sourceType":"module"}