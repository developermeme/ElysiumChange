{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arunm\\\\MeMeglobalsites\\\\Elysium\\\\New folder\\\\ElysiumChange\\\\src\\\\components\\\\containers\\\\PaymentContainer\\\\checkout-form\\\\CheckoutForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport { CardField, ErrorMessage, Field, ResetButton, SubmitButton } from \"./Elements\";\nimport \"./CheckoutForm.scss\";\nimport { paymentService } from \"../../../../utils/API\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CheckoutForm = props => {\n  _s();\n\n  const {\n    name,\n    amount,\n    email,\n    phoneNo,\n    onSuccess\n  } = props.PaymentProps;\n  const navigate = useNavigate();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [paymentMethod, setPaymentMethod] = useState(null);\n\n  const reset = () => {\n    setError(null);\n    setProcessing(false);\n    setPaymentMethod(null);\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setProcessing(true);\n    setError(null);\n    const response = await paymentService.stripePay({\n      amnt: +(amount * 100),\n      currency: \"INR\",\n      method: \"card\"\n    }).then(res => {\n      return res.data;\n    }).catch(err => {\n      setError(\"Payment Failure, Try Again Later\");\n    });\n    const clientSecret = response.client_secret;\n\n    if (clientSecret) {\n      const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            name: name\n          }\n        }\n      });\n      setProcessing(false);\n\n      if (paymentResult.error) {\n        alert(paymentResult.error.message);\n        setError(paymentResult.error.message);\n      } else {\n        if (paymentResult.paymentIntent.status === \"succeeded\") {\n          setPaymentMethod(paymentResult.paymentIntent);\n          alert(\"Payment Successful!\");\n          onSuccess(paymentResult.paymentIntent.id);\n          navigate(\"/orderconfirm\");\n        }\n      }\n    }\n  };\n\n  return paymentMethod ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Result\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ResultTitle\",\n      role: \"alert\",\n      children: \"Payment successful\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ResultMessage\",\n      children: [\"Thanks for trying Stripe Elements. we generated a PaymentMethod:\", \" \", paymentMethod.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResetButton, {\n      onClick: reset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"Form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"fieldset\", {\n      className: \"FormGroup\",\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        label: \"Name\",\n        id: \"name\",\n        type: \"text\",\n        placeholder: name,\n        autoComplete: \"name\",\n        defaultValue: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        label: \"Email\",\n        id: \"email\",\n        type: \"email\",\n        placeholder: email,\n        required: true,\n        autoComplete: \"email\",\n        defaultValue: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        label: \"Phone\",\n        id: \"phone\",\n        type: \"tel\",\n        placeholder: phoneNo,\n        required: true,\n        autoComplete: \"tel\",\n        defaultValue: phoneNo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      className: \"FormGroup\",\n      children: /*#__PURE__*/_jsxDEV(CardField, {\n        onchange: e => {\n          setError(null);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n      processing: processing,\n      error: error,\n      disabled: !stripe,\n      children: `PAY INR ${amount}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckoutForm, \"JhJ/CCBV3V9uTa9k3eWy556/IOw=\", false, function () {\n  return [useNavigate, useStripe, useElements];\n});\n\n_c = CheckoutForm;\n\nconst StripeCard = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"AppWrapper\",\n    children: /*#__PURE__*/_jsxDEV(CheckoutForm, {\n      PaymentProps: props.PaymentProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = StripeCard;\nexport default StripeCard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CheckoutForm\");\n$RefreshReg$(_c2, \"StripeCard\");","map":{"version":3,"names":["useState","CardElement","useElements","useStripe","CardField","ErrorMessage","Field","ResetButton","SubmitButton","paymentService","useNavigate","CheckoutForm","props","name","amount","email","phoneNo","onSuccess","PaymentProps","navigate","stripe","elements","error","setError","processing","setProcessing","paymentMethod","setPaymentMethod","reset","handleSubmit","event","preventDefault","response","stripePay","amnt","currency","method","then","res","data","catch","err","clientSecret","client_secret","paymentResult","confirmCardPayment","payment_method","card","getElement","billing_details","alert","message","paymentIntent","status","id","e","StripeCard"],"sources":["C:/Users/arunm/MeMeglobalsites/Elysium/New folder/ElysiumChange/src/components/containers/PaymentContainer/checkout-form/CheckoutForm.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\r\n\r\nimport {\r\n  CardField,\r\n  ErrorMessage,\r\n  Field,\r\n  ResetButton,\r\n  SubmitButton,\r\n} from \"./Elements\";\r\nimport \"./CheckoutForm.scss\";\r\nimport { paymentService } from \"../../../../utils/API\";\r\nimport { IPaymentProps } from \"../PaymentContainer\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst CheckoutForm = (props: IPaymentProps) => {\r\n  const { name, amount, email, phoneNo, onSuccess } = props.PaymentProps;\r\n  const navigate = useNavigate();\r\n  const stripe = useStripe();\r\n  const elements = useElements() as any;\r\n  const [error, setError] = useState<any>(null);\r\n  const [processing, setProcessing] = useState(false);\r\n  const [paymentMethod, setPaymentMethod] = useState<any>(null);\r\n\r\n  const reset = () => {\r\n    setError(null);\r\n    setProcessing(false);\r\n    setPaymentMethod(null);\r\n  };\r\n\r\n  const handleSubmit = async (event: any) => {\r\n    event.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n\r\n    setProcessing(true);\r\n    setError(null);\r\n\r\n    const response = await paymentService\r\n      .stripePay({\r\n        amnt: +(amount * 100),\r\n        currency: \"INR\",\r\n        method: \"card\",\r\n      })\r\n      .then((res: any) => {\r\n        return res.data;\r\n      })\r\n      .catch((err) => {\r\n        setError(\"Payment Failure, Try Again Later\");\r\n      });\r\n\r\n    const clientSecret = response.client_secret;\r\n\r\n    if (clientSecret) {\r\n      const paymentResult = await stripe.confirmCardPayment(clientSecret, {\r\n        payment_method: {\r\n          card: elements.getElement(CardElement),\r\n          billing_details: {\r\n            name: name,\r\n          },\r\n        },\r\n      });\r\n\r\n      setProcessing(false);\r\n\r\n      if (paymentResult.error) {\r\n        alert(paymentResult.error.message);\r\n        setError(paymentResult.error.message);\r\n      } else {\r\n        if (paymentResult.paymentIntent.status === \"succeeded\") {\r\n          setPaymentMethod(paymentResult.paymentIntent as any);\r\n          alert(\"Payment Successful!\");\r\n          onSuccess(paymentResult.paymentIntent.id);\r\n          navigate(\"/orderconfirm\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return paymentMethod ? (\r\n    <div className=\"Result\">\r\n      <div className=\"ResultTitle\" role=\"alert\">\r\n        Payment successful\r\n      </div>\r\n      <div className=\"ResultMessage\">\r\n        Thanks for trying Stripe Elements. we generated a PaymentMethod:{\" \"}\r\n        {paymentMethod.id}\r\n      </div>\r\n      <ResetButton onClick={reset} />\r\n    </div>\r\n  ) : (\r\n    <form className=\"Form\" onSubmit={handleSubmit}>\r\n      <fieldset className=\"FormGroup\">\r\n        <Field\r\n          label=\"Name\"\r\n          id=\"name\"\r\n          type=\"text\"\r\n          placeholder={name}\r\n          autoComplete=\"name\"\r\n          defaultValue={name}\r\n        />\r\n        <Field\r\n          label=\"Email\"\r\n          id=\"email\"\r\n          type=\"email\"\r\n          placeholder={email}\r\n          required\r\n          autoComplete=\"email\"\r\n          defaultValue={email}\r\n        />\r\n        <Field\r\n          label=\"Phone\"\r\n          id=\"phone\"\r\n          type=\"tel\"\r\n          placeholder={phoneNo}\r\n          required\r\n          autoComplete=\"tel\"\r\n          defaultValue={phoneNo}\r\n        />\r\n      </fieldset>\r\n      <fieldset className=\"FormGroup\">\r\n        <CardField\r\n          onchange={(e: any) => {\r\n            setError(null);\r\n          }}\r\n        />\r\n      </fieldset>\r\n      {error && <ErrorMessage>{error}</ErrorMessage>}\r\n      <SubmitButton processing={processing} error={error} disabled={!stripe}>\r\n        {`PAY INR ${amount}`}\r\n      </SubmitButton>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst StripeCard = (props: IPaymentProps) => {\r\n  return (\r\n    <div className=\"AppWrapper\">\r\n      <CheckoutForm PaymentProps={props.PaymentProps} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StripeCard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}