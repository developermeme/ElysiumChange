{"ast":null,"code":"import { DeliveryServices } from \"../../../utils/API\";\nexport const getAddressListService = async item => {\n  return DeliveryServices.getAddress(item).then(res => res.data).catch(error => error);\n};\nexport const addNewAdrdressService = async item => {\n  return DeliveryServices.addAddress(item).then(res => res).catch(error => error);\n};\nexport const updateNewAddressService = async item => {\n  return DeliveryServices.updateAddress(item).then(res => res.status).catch(error => error);\n};\nexport const deleteAddressService = async item => {\n  return DeliveryServices.deleteAddress(item).then(res => res.status).catch(error => error);\n};","map":{"version":3,"names":["DeliveryServices","getAddressListService","item","getAddress","then","res","data","catch","error","addNewAdrdressService","addAddress","updateNewAddressService","updateAddress","status","deleteAddressService","deleteAddress"],"sources":["C:/Users/arunm/MeMeglobalsites/Elysium/New folder/ElysiumChange/src/components/stateContainers/Address/Service.ts"],"sourcesContent":["import { DeliveryServices } from \"../../../utils/API\";\r\n\r\nexport interface IGetAddress {\r\n  phone: string;\r\n}\r\n\r\nexport interface IDeleteAddress {\r\n  id: number;\r\n}\r\n\r\nexport interface IAddAddress {\r\n  name: string;\r\n  phone: string;\r\n  flatNo: string;\r\n  street: string;\r\n  landMark: string;\r\n  city: string;\r\n  pin: string;\r\n  uPhone?: number;\r\n  addId?: number;\r\n  userId?: {\r\n    userId: number;\r\n    uPhone: string;\r\n    uName: String;\r\n  };\r\n}\r\n\r\nexport const getAddressListService = async (\r\n  item: IGetAddress\r\n): Promise<any> => {\r\n  return DeliveryServices.getAddress(item)\r\n    .then((res: any) => res.data)\r\n    .catch((error: any) => error);\r\n};\r\n\r\nexport const addNewAdrdressService = async (\r\n  item: IAddAddress\r\n): Promise<any> => {\r\n  return DeliveryServices.addAddress(item)\r\n    .then((res: any) => res)\r\n    .catch((error: any) => error);\r\n};\r\n\r\nexport const updateNewAddressService = async (\r\n  item: IAddAddress\r\n): Promise<any> => {\r\n  return DeliveryServices.updateAddress(item)\r\n    .then((res: any) => res.status)\r\n    .catch((error: any) => error);\r\n};\r\n\r\nexport const deleteAddressService = async (\r\n  item: IDeleteAddress\r\n): Promise<any> => {\r\n  return DeliveryServices.deleteAddress(item)\r\n    .then((res: any) => res.status)\r\n    .catch((error: any) => error);\r\n};\r\n"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,oBAAjC;AA2BA,OAAO,MAAMC,qBAAqB,GAAG,MACnCC,IADmC,IAElB;EACjB,OAAOF,gBAAgB,CAACG,UAAjB,CAA4BD,IAA5B,EACJE,IADI,CACEC,GAAD,IAAcA,GAAG,CAACC,IADnB,EAEJC,KAFI,CAEGC,KAAD,IAAgBA,KAFlB,CAAP;AAGD,CANM;AAQP,OAAO,MAAMC,qBAAqB,GAAG,MACnCP,IADmC,IAElB;EACjB,OAAOF,gBAAgB,CAACU,UAAjB,CAA4BR,IAA5B,EACJE,IADI,CACEC,GAAD,IAAcA,GADf,EAEJE,KAFI,CAEGC,KAAD,IAAgBA,KAFlB,CAAP;AAGD,CANM;AAQP,OAAO,MAAMG,uBAAuB,GAAG,MACrCT,IADqC,IAEpB;EACjB,OAAOF,gBAAgB,CAACY,aAAjB,CAA+BV,IAA/B,EACJE,IADI,CACEC,GAAD,IAAcA,GAAG,CAACQ,MADnB,EAEJN,KAFI,CAEGC,KAAD,IAAgBA,KAFlB,CAAP;AAGD,CANM;AAQP,OAAO,MAAMM,oBAAoB,GAAG,MAClCZ,IADkC,IAEjB;EACjB,OAAOF,gBAAgB,CAACe,aAAjB,CAA+Bb,IAA/B,EACJE,IADI,CACEC,GAAD,IAAcA,GAAG,CAACQ,MADnB,EAEJN,KAFI,CAEGC,KAAD,IAAgBA,KAFlB,CAAP;AAGD,CANM"},"metadata":{},"sourceType":"module"}