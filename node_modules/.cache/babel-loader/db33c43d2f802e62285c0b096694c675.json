{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\";\nimport useIsomorphicLayoutEffect from \"./useIsomorphicLayoutEffect \";\n\nfunction useEventListener(eventName, handler, element) {\n  _s();\n\n  // Create a ref that stores handler\n  const savedHandler = useRef(handler);\n  useIsomorphicLayoutEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(() => {\n    // Define the listening target\n    const targetElement = (element === null || element === void 0 ? void 0 : element.current) || window;\n\n    if (!(targetElement && targetElement.addEventListener)) {\n      return;\n    } // Create event listener that calls handler function stored in ref\n\n\n    const eventListener = event => savedHandler.current(event);\n\n    targetElement.addEventListener(eventName, eventListener); // Remove event listener on cleanup\n\n    return () => {\n      targetElement.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element]);\n}\n\n_s(useEventListener, \"EH916eH0EvCEeOm2Bl53TZGwYMg=\", false, function () {\n  return [useIsomorphicLayoutEffect];\n});\n\nexport default useEventListener;","map":{"version":3,"names":["useEffect","useRef","useIsomorphicLayoutEffect","useEventListener","eventName","handler","element","savedHandler","current","targetElement","window","addEventListener","eventListener","event","removeEventListener"],"sources":["C:/Users/arunm/MeMeglobalsites/Elysium/New folder/ElysiumChange/src/hook/useEventListener.tsx"],"sourcesContent":["import { RefObject, useEffect, useRef } from \"react\";\r\nimport useIsomorphicLayoutEffect from \"./useIsomorphicLayoutEffect \";\r\n\r\nfunction useEventListener<\r\n  KW extends keyof WindowEventMap,\r\n  KH extends keyof HTMLElementEventMap,\r\n  T extends HTMLElement | void = void\r\n>(\r\n  eventName: KW | KH,\r\n  handler: (\r\n    event: WindowEventMap[KW] | HTMLElementEventMap[KH] | Event\r\n  ) => void,\r\n  element?: RefObject<T>\r\n) {\r\n  // Create a ref that stores handler\r\n  const savedHandler = useRef(handler);\r\n\r\n  useIsomorphicLayoutEffect(() => {\r\n    savedHandler.current = handler;\r\n  }, [handler]);\r\n\r\n  useEffect(() => {\r\n    // Define the listening target\r\n    const targetElement: T | Window | any = element?.current || window;\r\n    if (!(targetElement && targetElement.addEventListener)) {\r\n      return;\r\n    }\r\n\r\n    // Create event listener that calls handler function stored in ref\r\n    const eventListener: typeof handler = (event) =>\r\n      savedHandler.current(event);\r\n\r\n    targetElement.addEventListener(eventName, eventListener);\r\n\r\n    // Remove event listener on cleanup\r\n    return () => {\r\n      targetElement.removeEventListener(eventName, eventListener);\r\n    };\r\n  }, [eventName, element]);\r\n}\r\n\r\nexport default useEventListener;\r\n"],"mappings":";;AAAA,SAAoBA,SAApB,EAA+BC,MAA/B,QAA6C,OAA7C;AACA,OAAOC,yBAAP,MAAsC,8BAAtC;;AAEA,SAASC,gBAAT,CAKEC,SALF,EAMEC,OANF,EASEC,OATF,EAUE;EAAA;;EACA;EACA,MAAMC,YAAY,GAAGN,MAAM,CAACI,OAAD,CAA3B;EAEAH,yBAAyB,CAAC,MAAM;IAC9BK,YAAY,CAACC,OAAb,GAAuBH,OAAvB;EACD,CAFwB,EAEtB,CAACA,OAAD,CAFsB,CAAzB;EAIAL,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,aAA+B,GAAG,CAAAH,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEE,OAAT,KAAoBE,MAA5D;;IACA,IAAI,EAAED,aAAa,IAAIA,aAAa,CAACE,gBAAjC,CAAJ,EAAwD;MACtD;IACD,CALa,CAOd;;;IACA,MAAMC,aAA6B,GAAIC,KAAD,IACpCN,YAAY,CAACC,OAAb,CAAqBK,KAArB,CADF;;IAGAJ,aAAa,CAACE,gBAAd,CAA+BP,SAA/B,EAA0CQ,aAA1C,EAXc,CAad;;IACA,OAAO,MAAM;MACXH,aAAa,CAACK,mBAAd,CAAkCV,SAAlC,EAA6CQ,aAA7C;IACD,CAFD;EAGD,CAjBQ,EAiBN,CAACR,SAAD,EAAYE,OAAZ,CAjBM,CAAT;AAkBD;;GApCQH,gB;UAcPD,yB;;;AAwBF,eAAeC,gBAAf"},"metadata":{},"sourceType":"module"}